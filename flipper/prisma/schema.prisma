// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//lo que empieza con @ son atributos 
//todo son modelos, atribuyos, enums y 


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//falta agregar un campo para manejar la autorizacion por parte del admin
model Empresa {
  nombre String @unique
  resetContrasenaCode String?
  isAdmin Boolean @default(false)
  isDeleted Boolean @default(false)
  nombreceo String
  email String @unique
  authorizedByAdmin Boolean @default(false)
  ciudad String
  direccion String @unique
  telefono String @unique
  password String
  eventos Evento[] // Una empresa puede tener muchos eventos
  id String @id @default(uuid()) // id primary key de empresa
  //@id define una id, @default define un valor default para el campo, autoincrement hace que empieze por uno y continue 
  //https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#default
  //content   String? //? hace que el campo sea opcional, [] haria que el campo sea un array
  //published Boolean @default(false)
  //author    User?   @relation(fields: [authorId], references: [id]), atributo relation define relaciones entre tablas
  //authorId  String?
}

model Evento {
  id String @id @default(uuid())
  isDeleted Boolean @default(false)
  Canceled Boolean @default(false)
  admitePostulaciones Boolean  @default(true)
  empresa Empresa @relation(fields: [id_empresa], references: [id]) // un evento solo tiene una empresa
  nombre String
  id_empresa String
  fecha_inicio DateTime @db.Timestamp()//indica que al guardar en db lo almacena como datatype date
  fecha_final DateTime @db.Timestamp()
  lugar String
  cupos Int
  perfil String
  pago Int
  numeroPostulantes Int @default(0)
  observaciones String
  trabajadores TrabajadoresEnEventos[]
}

model Trabajador {
  id String @id @default(uuid()) //ver si se pueden usar UUID
  status_contratacion TrabajadoresEnEventos[]
  resetContrasenaCode String?
  name String
  idType String
  Edad Int @default(18)
  idNumber Int
  nacimiento String?
  genero String?
  phone String @unique
  email String @unique
  ciudad String? 
  direccion String?
  estatura Int?
  talla_camiseta String?
  grupo_sanguineo String?
  imagen_dni String? //adjunto
  foto String? //adjunto
  cv String? //adjunto
  rut String? //adjunto
  certificado_bancario String? //adjunto
  password String
  isDeleted Boolean @default(false)
  isAdmin Boolean @default(false)
}

model TrabajadoresEnEventos {
  evento Evento @relation(fields: [eventoId], references: [id])
  eventoId String 
  trabajadores Trabajador @relation(fields: [trabajadorId], references: [id])
  trabajadorId String
  status String
  notificacionVista Boolean @default(true)
  createdAt DateTime @default(now())
  @@id([eventoId, trabajadorId])
}


